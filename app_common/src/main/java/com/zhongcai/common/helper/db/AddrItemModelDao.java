package com.zhongcai.common.helper.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhongcai.common.widget.optaddress.AddrItemModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "water_address".
*/
public class AddrItemModelDao extends AbstractDao<AddrItemModel, Void> {

    public static final String TABLENAME = "water_address";

    /**
     * Properties of entity AddrItemModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Pid = new Property(1, int.class, "pid", false, "PID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Mergename = new Property(3, String.class, "mergename", false, "MERGENAME");
        public final static Property Level = new Property(4, int.class, "level", false, "LEVEL");
        public final static Property Pinyin = new Property(5, String.class, "pinyin", false, "PINYIN");
        public final static Property Lng = new Property(6, String.class, "lng", false, "LNG");
        public final static Property Lat = new Property(7, String.class, "lat", false, "LAT");
        public final static Property Is_all_divide = new Property(8, int.class, "is_all_divide", false, "IS_ALL_DIVIDE");
        public final static Property Create_time = new Property(9, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Update_time = new Property(10, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property Delete_tag = new Property(11, int.class, "delete_tag", false, "DELETE_TAG");
    }


    public AddrItemModelDao(DaoConfig config) {
        super(config);
    }
    
    public AddrItemModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"water_address\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"PID\" INTEGER NOT NULL ," + // 1: pid
                "\"NAME\" TEXT," + // 2: name
                "\"MERGENAME\" TEXT," + // 3: mergename
                "\"LEVEL\" INTEGER NOT NULL ," + // 4: level
                "\"PINYIN\" TEXT," + // 5: pinyin
                "\"LNG\" TEXT," + // 6: lng
                "\"LAT\" TEXT," + // 7: lat
                "\"IS_ALL_DIVIDE\" INTEGER NOT NULL ," + // 8: is_all_divide
                "\"CREATE_TIME\" TEXT," + // 9: create_time
                "\"UPDATE_TIME\" TEXT," + // 10: update_time
                "\"DELETE_TAG\" INTEGER NOT NULL );"); // 11: delete_tag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"water_address\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AddrItemModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String mergename = entity.getMergename();
        if (mergename != null) {
            stmt.bindString(4, mergename);
        }
        stmt.bindLong(5, entity.getLevel());
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(6, pinyin);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(7, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(8, lat);
        }
        stmt.bindLong(9, entity.getIs_all_divide());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(10, create_time);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(11, update_time);
        }
        stmt.bindLong(12, entity.getDelete_tag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AddrItemModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String mergename = entity.getMergename();
        if (mergename != null) {
            stmt.bindString(4, mergename);
        }
        stmt.bindLong(5, entity.getLevel());
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(6, pinyin);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(7, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(8, lat);
        }
        stmt.bindLong(9, entity.getIs_all_divide());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(10, create_time);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(11, update_time);
        }
        stmt.bindLong(12, entity.getDelete_tag());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AddrItemModel readEntity(Cursor cursor, int offset) {
        AddrItemModel entity = new AddrItemModel( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // pid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mergename
            cursor.getInt(offset + 4), // level
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pinyin
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lng
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lat
            cursor.getInt(offset + 8), // is_all_divide
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // create_time
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // update_time
            cursor.getInt(offset + 11) // delete_tag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AddrItemModel entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setPid(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMergename(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLevel(cursor.getInt(offset + 4));
        entity.setPinyin(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLng(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLat(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIs_all_divide(cursor.getInt(offset + 8));
        entity.setCreate_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdate_time(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDelete_tag(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AddrItemModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AddrItemModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(AddrItemModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
